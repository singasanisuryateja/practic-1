/*
 * mvn generated by tentackle-project-archetype.
 */

package flipkart.gui.password;

import flipkart.common.mvnHelper;
import flipkart.gui.GuiBundle;
import flipkart.pdo.md.User;
import javafx.fxml.FXML;
import javafx.scene.Scene;
import javafx.stage.Modality;
import javafx.stage.Stage;

import org.tentackle.bind.Bindable;
import org.tentackle.common.StringHelper;
import org.tentackle.fx.AbstractFxController;
import org.tentackle.fx.Fx;
import org.tentackle.fx.FxControllerService;
import org.tentackle.fx.component.FxButton;
import org.tentackle.fx.component.FxPasswordField;
import org.tentackle.pdo.DomainContext;
import org.tentackle.pdo.DomainContextProvider;

import java.text.MessageFormat;
import java.util.Arrays;
import java.util.Objects;
import java.util.ResourceBundle;

/**
 * Controller for changing the user's password.
 *
 * @author harald
 */
@FxControllerService
public class ChangePasswordView extends AbstractFxController implements DomainContextProvider {

  /**
   * Shows the dialog and prompts the user to change his password.
   *
   * @param user the user
   */
  public static void showDialog(User user) {
    if (user.isWriteAllowed() && user.isPasswordChangeable()) {
      ChangePasswordView controller = Fx.load(ChangePasswordView.class);
      Stage stage = Fx.createStage(Modality.NONE);
      Scene scene = new Scene(controller.getView());
      stage.setScene(scene);
      stage.setTitle(MessageFormat.format(GuiBundle.getString("password {0}"), user));
      controller.setUser(user);
      stage.show();
    }
    else {
      Fx.info(GuiBundle.getString("you're not allowed to change your password"));
    }
  }


  @Bindable
  private char[] oldPassword;
  @Bindable
  private char[] newPassword;
  @Bindable
  private char[] confirmedNewPassword;

  @FXML
  private FxPasswordField oldPasswordField;
  @FXML
  private FxPasswordField newPasswordField;
  @FXML
  private FxPasswordField confirmedNewPasswordField;
  @FXML
  private FxButton saveButton;
  @FXML
  private FxButton cancelButton;

  @FXML
  private ResourceBundle resources;

  private User user;
  private String oldPasswordHash;

  @FXML
  private void initialize() {
    saveButton.setGraphic(Fx.createImageView("save"));
    saveButton.setOnAction(e -> save());

    cancelButton.setGraphic(Fx.createImageView("close"));
    cancelButton.setOnAction(e -> close());
  }

  private void setUser(User user) {
    this.user = user;
    this.oldPasswordHash = user.selectPasswordHash();
    getContainer().updateView();
  }

  @Override
  public DomainContext getDomainContext() {
    return user.getDomainContext();
  }

  private void save() {
    if (Objects.equals(mvnHelper.hash(oldPassword), oldPasswordHash)) {
      if (!Arrays.equals(newPassword, confirmedNewPassword)) {
        Fx.error(resources.getString("new passwords do not match"));
      }
      else {
        user = user.reload();
        if (newPassword == null) {
          user.updatePasswordHash(null);
          Fx.yes(resources.getString("are you sure to disable the password check?"), false, this::saveAndClose);
        }
        else {
          user.updatePasswordHash(mvnHelper.hash(newPassword));
          Fx.yes(resources.getString("save new password?"), false, this::saveAndClose);
        }
      }
    }
    else {
      Fx.error(resources.getString("wrong password"));
    }
  }

  private void saveAndClose() {
    user.save();
    close();
  }

  private void close() {
    StringHelper.blank(oldPassword);
    StringHelper.blank(newPassword);
    StringHelper.blank(confirmedNewPassword);
    getStage().close();
  }
}
