/*
 * mvn generated by tentackle-project-archetype.
 */

package flipkart.pdo.td;

import flipkart.pdo.MessageType;
import flipkart.pdo.TransactionData;
import flipkart.pdo.md.OrgUnit;
import flipkart.pdo.td.domain.MessageDomain;
import flipkart.pdo.td.persist.MessagePersistence;

import org.tentackle.pdo.Pdo;
import org.tentackle.pdo.Plural;
import org.tentackle.pdo.Singular;
import org.tentackle.session.ClassId;
import org.tentackle.session.TableName;

/*
 * @{
 * tablename = td.message
 * classid = 2001
 * mapping = $model/$tablename.map
 * @}
 */

/*
 * @> $mapping
 *
 * # Message
 * name := $classname
 * table := $tablename
 * id := $classid
 * integrity := $integrity
 *
 * ## attributes
 * [tableserial]
 * String($msg_no)                  messageNumber         message_no      message number [key, normtext, @NotNull]
 * Timestamp                        when                  mwhen           timestamp of message [@NotNull]
 * MessageType<String>($msg_type)   messageType           mtype           the message type [trimwrite, @NotNull]
 * Integer                          refersToClassId       ref_class_id    class id if message refers to a PDO
 * Long                             refersToPdoId         ref_pdo_id      object id if message refers to a PDO
 * String($msg_ref)                 refersToText          ref_txt         refers text or toString of refersToPdo [trimwrite, normtext]
 * Long                             orgUnitId             orgunit_id      ID of the responsible orgunit
 * String($msg_text)                text                  mtext           message text [trimwrite, normtext]
 *
 *
 * ## indexes
 * unique index udk  := message_no
 * index type        := mtype, id
 * index orgunit     := orgunit_id
 * index when        := mwhen
 *
 *
 * ## relations
 * OrgUnit:
 *    relation = normtext
 *
 * @<
 */

/**
 * Message.
 * <p>
 * Events logged as messages.
 */
@TableName(value =/**/"td.message"/**/, // @wurblet < Inject --string $tablename
           mapSchema =/**/false/**/,    // @wurblet < Inject $mapSchema
           prefix =/**/""/**/)          // @wurblet < Inject --string $tablePrefix
@ClassId(/**/2001/**/)                  // @wurblet < Inject $classid
@Singular("Message")
@Plural("Messages")
public interface Message extends TransactionData<Message>, MessagePersistence, MessageDomain {

  // @wurblet(fold=expanded) modelComment ModelComment

  //<editor-fold defaultstate="expanded" desc="code 'modelComment' generated by wurblet ModelComment">//GEN-BEGIN:modelComment

  /*
   * -------------------------------------------------------------------------------------------------------------------
   *
   * Message is not referenced by any other entity
   *
   *
   * Message is a root entity
   *
   *
   * Message is referencing the following entities:
   *
   * OrgUnit via orgUnitId [1:1]
   *
   *
   * Message is not extended
   *
   * -------------------------------------------------------------------------------------------------------------------
   */

  //</editor-fold>//GEN-END:modelComment


  // @wurblet uniqueDomainKey UniqueDomainKey

  //<editor-fold defaultstate="collapsed" desc="code 'uniqueDomainKey' generated by wurblet UniqueDomainKey">//GEN-BEGIN:uniqueDomainKey

  // unique domain key for Message is messageNumber

  //</editor-fold>//GEN-END:uniqueDomainKey



  /**
   * Name of the message number pool.
   */
  String POOL_NAME = "MSG";


  /**
   * Logs a message.
   *
   * @param messageType the message type
   * @param refersTo the object the message refers to
   * @param text the message text
   * @param owner the optional owner, null if determine from context
   * @return the created message
   */
  static Message log(MessageType messageType, Object refersTo, String text, OrgUnit<?> owner) {
    return Pdo.create(Message.class, Pdo.createDomainContext()).create(messageType, refersTo, text, owner);
  }

  /**
   * Logs a message.
   *
   * @param messageType the message type
   * @param refersTo the object the message refers to
   * @param text the message text
   * @return the created message
   */
  static Message log(MessageType messageType, Object refersTo, String text) {
    return log(messageType, refersTo, text, null);
  }

}
