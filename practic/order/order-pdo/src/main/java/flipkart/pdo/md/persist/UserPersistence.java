/*
 * mvn generated by tentackle-project-archetype.
 */

package flipkart.pdo.md.persist;

import flipkart.pdo.md.User;
import flipkart.pdo.md.User2Group;
import flipkart.pdo.md.UserGroup;

import org.tentackle.bind.Bindable;
import org.tentackle.misc.TrackedList;
import org.tentackle.session.Persistent;

/**
 * Persistence interface for User.
 */
public interface UserPersistence extends OrgUnitPersistence<User> {

  // @wurblet attributeNames AttributeNames

  //<editor-fold defaultstate="collapsed" desc="code 'attributeNames' generated by wurblet AttributeNames">//GEN-BEGIN:attributeNames


  /** relation name for 'composite list of User2Group nmLinks via User2Group#userId (NmLinks)'. */
  String RN_NMLINKS = "nmLinks";

  /** attribute name for database column 'login_allowed'. */
  String AN_LOGINALLOWED = "loginAllowed";

  /** attribute name for database column 'passwd_chgbl'. */
  String AN_PASSWORDCHANGEABLE = "passwordChangeable";

  /** attribute name for database column 'prefs_chgbl'. */
  String AN_CHANGINGPREFERENCESALLOWED = "changingPreferencesAllowed";

  /** attribute name for database column 'prefs_system'. */
  String AN_SYSTEMPREFERENCESONLY = "systemPreferencesOnly";

  //</editor-fold>//GEN-END:attributeNames


  // @wurblet columnLenghts ColumnLengths

  //<editor-fold defaultstate="collapsed" desc="code 'columnLenghts' generated by wurblet ColumnLengths">//GEN-BEGIN:columnLenghts


  /** maximum number of characters for 'password'. */
  int CL_PASSWORD = 64;

  //</editor-fold>//GEN-END:columnLenghts


  // @wurblet methods Methods

  //<editor-fold defaultstate="collapsed" desc="code 'methods' generated by wurblet Methods">//GEN-BEGIN:methods


  /**
   * Gets the attribute loginAllowed.
   *
   * @return true if login is allowed
   */
  @Persistent(ordinal=7, comment="true if login is allowed")
  @Bindable
  boolean isLoginAllowed();

  /**
   * Sets the attribute loginAllowed.
   *
   * @param loginAllowed true if login is allowed
   */
  @Bindable
  void setLoginAllowed(boolean loginAllowed);

  /**
   * Gets the attribute passwordChangeable.
   *
   * @return user allowed to change its own password?
   */
  @Persistent(ordinal=8, comment="user allowed to change its own password?")
  @Bindable
  boolean isPasswordChangeable();

  /**
   * Sets the attribute passwordChangeable.
   *
   * @param passwordChangeable user allowed to change its own password?
   */
  @Bindable
  void setPasswordChangeable(boolean passwordChangeable);

  /**
   * Gets the attribute changingPreferencesAllowed.
   *
   * @return user allowed to maintain its own preferences?
   */
  @Persistent(ordinal=9, comment="user allowed to maintain its own preferences?")
  @Bindable
  boolean isChangingPreferencesAllowed();

  /**
   * Sets the attribute changingPreferencesAllowed.
   *
   * @param changingPreferencesAllowed user allowed to maintain its own preferences?
   */
  @Bindable
  void setChangingPreferencesAllowed(boolean changingPreferencesAllowed);

  /**
   * Gets the attribute systemPreferencesOnly.
   *
   * @return user restricted to system preferences only?
   */
  @Persistent(ordinal=10, comment="user restricted to system preferences only?")
  @Bindable
  boolean isSystemPreferencesOnly();

  /**
   * Sets the attribute systemPreferencesOnly.
   *
   * @param systemPreferencesOnly user restricted to system preferences only?
   */
  @Bindable
  void setSystemPreferencesOnly(boolean systemPreferencesOnly);

  //</editor-fold>//GEN-END:methods


  // @wurblet relations Relations

  //<editor-fold defaultstate="collapsed" desc="code 'relations' generated by wurblet Relations">//GEN-BEGIN:relations


  /**
   * Gets composite list of User2Group nmLinks via User2Group#userId (NmLinks).
   *
   * @return nmLinks NmLinks
   */
  @Bindable
  @Persistent(ordinal=0, comment="NmLinks")
  TrackedList<User2Group> getNmLinks();

  /**
   * Gets list of UserGroup joined via composite list of User2Group nmLinks via User2Group#userId (NmLinks).
   *
   * @return list of userGroup
   */
  @Bindable
  @Persistent(ordinal=0, comment="userGroups", component=false)
  TrackedList<UserGroup> getUserGroups();

  /**
   * Returns whether NmLinks is loaded.
   *
   * @return true if getNmLinks() invoked at least once
   */
  @Bindable
  boolean isNmLinksLoaded();

  //</editor-fold>//GEN-END:relations


  /**
   * Selects the password from the database.
   *
   * @return the password hash
   */
  String selectPasswordHash();

  /**
   * Updates the password in the database.
   *
   * @param password the password hash, null to disable
   */
  void updatePasswordHash(String password);

}
