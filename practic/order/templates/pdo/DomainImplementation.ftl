/*
 * Generated by PDO wizard.
 */

package ${domainImplPackage};


import ${pdoPackage}.${pdoInterface};
<#if domainPackage != domainImplPackage>
import ${domainPackage}.${domainInterface};
</#if>

import org.tentackle.domain.AbstractDomainObject;
import org.tentackle.pdo.DomainException;
import org.tentackle.pdo.DomainObjectService;


/**
 * Domain implementation for ${pdoInterface}.
 */
@DomainObjectService(${pdoInterface}.class)
<#if pdoInheritance != "NONE">
public class ${domainImplementation}<T extends ${pdoInterface}<T>, D extends ${domainImplementation}<T,D>>
       extends ${superDomainImplementation}<T,D> implements ${domainInterface}<T> {
<#else>
public class ${domainImplementation} extends ${superDomainImplementation}<${pdoInterface}, ${domainImplementation}> implements ${domainInterface} {
</#if>

  /** serial version UID. */
  private static final long serialVersionUID = 1L;

  //<editor-fold defaultstate="collapsed" desc="constructors">

  /**
   * Creates a domain object for a PDO.
   *
   * @param pdo the persistent domain object
   */
<#if pdoInheritance != "NONE">
  public ${domainImplementation}(T pdo) {
<#else>
  public ${domainImplementation}(${pdoInterface} pdo) {
</#if>
    super(pdo);
  }

  /**
   * Creates a domain object.
   */
  public ${domainImplementation}() {
    super();
  }

  //</editor-fold>

  // @wurblet domainMethods DomainMethods

}