/*
 * mvn generated by tentackle-project-archetype.
 */

package flipkart.server.rmi;

import flipkart.common.mvnHelper;
import flipkart.common.mvnSessionInfo;
import flipkart.pdo.MessageType;
import flipkart.pdo.md.User;
import flipkart.pdo.td.Message;
import flipkart.persist.rmi.mvnRemoteDbSession;
import flipkart.server.ServerBundle;

import org.tentackle.app.AbstractApplication;
import org.tentackle.common.LocaleProvider;
import org.tentackle.common.StringHelper;
import org.tentackle.dbms.rmi.RemoteDbConnectionImpl;
import org.tentackle.dbms.rmi.RemoteDbSessionImpl;
import org.tentackle.log.Logger;
import org.tentackle.pdo.DomainContext;
import org.tentackle.pdo.Pdo;
import org.tentackle.session.AlreadyLoggedInException;
import org.tentackle.session.LoginFailedException;
import org.tentackle.session.SessionInfo;

import java.text.MessageFormat;
import java.util.Objects;

/**
 * Application specific remote session.
 */
public class mvnRemoteDbSessionImpl extends RemoteDbSessionImpl implements mvnRemoteDbSession {

  private static final Logger LOGGER = Logger.get();


  private boolean loggedIn;   // true if session successfully logged in

  /**
   * Creates a session on a given connection.
   *
   * @param con the connection
   * @param clientInfo the UserInfo from the client
   * @param serverInfo the UserInfo to establish the connection to the database server
   */
  public mvnRemoteDbSessionImpl(RemoteDbConnectionImpl con, SessionInfo clientInfo, SessionInfo serverInfo) {
    super(con, clientInfo, serverInfo);
  }

  @Override
  public void verifySessionInfo(SessionInfo sessionInfo) {
    String passwordHash = mvnHelper.hash(sessionInfo.getPassword());
    StringHelper.blank(sessionInfo.getPassword());
    DomainContext context = Pdo.createDomainContext(getSession());
    String username = sessionInfo.getUserName();
    User user = Pdo.create(User.class, context).selectByUniqueDomainKey(username);
    if (user == null) {
      LOGGER.warning("attempt to login for unknown user {0}", username);
    }
    else {
      if (Objects.equals(passwordHash, user.selectPasswordHash())) {
        if (!user.isLoginAllowed()) {
          LOGGER.warning("attempt to login for disabled user {0} (matching password)", username);
          user = null;
        }
      }
      else {
        LOGGER.warning("attempt to login with wrong password for user {0}", username);
        user = null;
      }
    }

    if (user == null) {
      throw new LoginFailedException("login refused");
    }

    sessionInfo.setUserId(user.getId());
    sessionInfo.setUserClassId(user.getClassId());
    LocaleProvider.getInstance().setCurrentLocale(sessionInfo.getLocale());
    getSession().makeCurrent();

    if (!sessionInfo.isCloned()) {
      // user must be logged in only once (per main session)
      SessionInfo otherInfo = isUserLoggedIn(sessionInfo);
      if (otherInfo != null) {
        throw new AlreadyLoggedInException(getSession(), otherInfo);
      }
      String message = MessageFormat.format(ServerBundle.getString("user {0} logged in from {1} with {2}, session {3}"),
                                            user, sessionInfo.getHostInfo(), sessionInfo.getApplicationName(), getSessionNumber());
      Message.log(MessageType.LOGIN, user, message, user);
      loggedIn = true;
    }
  }

  @Override
  protected void closeDb(boolean cleanup) {
    try {
      mvnSessionInfo sessionInfo = (mvnSessionInfo) getClientSessionInfo();
      if (!sessionInfo.isCloned() && getSession() != null) {    // if main session and not the finalizer
        DomainContext context = Pdo.createDomainContext(getSession());
        User user = AbstractApplication.getRunningApplication().getUser(context, sessionInfo.getUserId());
        LocaleProvider.getInstance().setCurrentLocale(sessionInfo.getLocale());
        getSession().makeCurrent();
        String message = null;
        if (user == null) {
          message = MessageFormat.format(ServerBundle.getString("bad login attempt with {0} as {1} from {2}"),
                                         sessionInfo.getApplicationName(), sessionInfo.getUserName(), sessionInfo.getHostInfo());
        }
        else if (loggedIn) {
          message = MessageFormat.format(ServerBundle.getString("user {0} logged out from {1} with {2}, session {3}"),
                                         user, sessionInfo.getHostInfo(), sessionInfo.getApplicationName(), getSessionNumber());
        }

        if (message != null) {
          if (cleanup) {
            message = MessageFormat.format(ServerBundle.getString("crashed {0}"), message);
          }

          Message.log(MessageType.LOGOUT, user, message, user);
        }
      }
    }
    catch (RuntimeException rex) {
      LOGGER.warning("could not create logout message for " + this, rex);
    }

    super.closeDb(cleanup);
  }

}
